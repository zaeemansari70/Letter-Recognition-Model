# -*- coding: utf-8 -*-
"""Project_code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ck5qhWFyE7OrZx3mqJezWDg0pticEpDb
"""



from google.colab import drive
drive.mount('/content/gdrive')

!pip install idx2numpy

import idx2numpy

test_images=idx2numpy.convert_from_file("/content/gdrive/MyDrive/Colab Notebooks/project/emnist-balanced-test-images-idx3-ubyte")
train_images=idx2numpy.convert_from_file("/content/gdrive/MyDrive/Colab Notebooks/project/emnist-balanced-train-images-idx3-ubyte")
test_labels=idx2numpy.convert_from_file("/content/gdrive/MyDrive/Colab Notebooks/project/emnist-balanced-test-labels-idx1-ubyte")
train_labels=idx2numpy.convert_from_file("/content/gdrive/MyDrive/Colab Notebooks/project/emnist-balanced-train-labels-idx1-ubyte")

import os
os.mkdir("Project")
os.mkdir("Project/Test")
os.mkdir("Project/Train")

from PIL import Image as im

a_dictionary = {}
a_file = open("/content/gdrive/MyDrive/Colab Notebooks/project/Mapping")
for i in a_file:
    key, value = i.split()
    a_dictionary[key] = value
    
# for key, value in a_dictionary.items():
#   path="Project/Train/"+str(value)
#   if not os.path.exists(path):
#     os.mkdir(path)
#   image = im.fromarray(train_images[i])    
#   image.save(path+"/"+str(i)+".jpeg")

for i in range(train_images.shape[0]):
  path="Project/Train/"+a_dictionary[str(train_labels[i])]
  if not os.path.exists(path):
    os.mkdir(path)
  image = im.fromarray(train_images[i])    
  image.save(path+"/"+str(i)+".jpeg")

for i in range(test_images.shape[0]):
  path="Project/Test/"+a_dictionary[str(test_labels[i])]
  if not os.path.exists(path):
    os.mkdir(path)
  image = im.fromarray(test_images[i])    
  image.save(path+"/"+str(i)+".jpeg")

import torch
import torchvision
import torchvision.transforms as transforms

transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

batch_size = 16

trainset = torchvision.datasets.ImageFolder(root='Project/Train', transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.ImageFolder(root='Project/Test', transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                         shuffle=False, num_workers=2)

classes= trainset.classes

import matplotlib.pyplot as plt
import numpy as np

# functions to show an image


def imshow(img):
    img = img / 2 + 0.5     # unnormalize
    npimg = img.numpy()
    plt.imshow(np.transpose(npimg, (1, 2, 0)))
    plt.show()


# get some random training images
dataiter = iter(trainloader)
images, labels = dataiter.next()

# show images
imshow(torchvision.utils.make_grid(images))
# print labels

import torch.nn as nn
import torch.nn.functional as F


class Net(nn.Module):
    def __init__(self):
        super().__init__()
        self.conv1 = nn.Conv2d(3, 10, 3)
        self.conv2 = nn.Conv2d(10, 20, 3)
        self.conv3 = nn.Conv2d(20, 56, 3)
        self.conv4 = nn.Conv2d(56, 100, 3)
        
        self.fc1 = nn.Linear(100 * 20 * 20, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 47)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv2(x))
        x = F.relu(self.conv3(x))
        x = F.relu(self.conv4(x))
        x = torch.flatten(x, 1) # flatten all dimensions except batch
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x


net = Net()

import torch.optim as optim

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)

device='cpu'
if torch.cuda.is_available():
  device='cuda'
device
net.to(device)

for epoch in range(30):  # loop over the dataset multiple times

    running_loss = 0.0
    for i, data in enumerate(trainloader, 0):
        # get the inputs; data is a list of [inputs, labels]
        inputs, labels = data
        inputs, labels = inputs.to(device), labels.to(device)

        # zero the parameter gradients
        optimizer.zero_grad()

        # forward + backward + optimize
        outputs = net(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        # print statistics
        running_loss += loss.item()
        if i % 2000 == 1999:    # print every 2000 mini-batches
            print('[%d, %5d] loss: %.3f' %
                  (epoch + 1, i + 1, running_loss / 2000))
            running_loss = 0.0

print('Finished Training')

trainset.classes
a_file = open("/content/gdrive/MyDrive/Colab Notebooks/project/my_classes","w")
a_file.write(str(trainset.classes))
trainset.classes

from google.colab import drive
drive.mount('/content/drive')

PATH = '/content/gdrive/MyDrive/Colab Notebooks/project/model.pth'
torch.save(net.state_dict(), PATH)

PATH = '/content/gdrive/MyDrive/Colab Notebooks/project/model.pth'
net = Net()
net.load_state_dict(torch.load(PATH))

dataiter = iter(testloader)
images, labels = dataiter.next()

# print images
imshow(torchvision.utils.make_grid(images))

correct = 0
total = 0
# since we're not training, we don't need to calculate the gradients for our outputs
with torch.no_grad():
    for data in testloader:
        inputs, labels = data
        inputs, labels = inputs.to(device), labels.to(device)
        # calculate outputs by running images through the network
        outputs = net(inputs)
        # the class with the highest energy is what we choose as prediction
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print('Accuracy of the network on the 10000 test images: %d %%' % (
    100 * correct / total))

net=net.to(device)

from PIL import Image
import cv2

imsize = 256
loader = transforms.Compose([transforms.Scale(imsize), transforms.ToTensor()])

transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

def image_loader(image_name):
    """load image, returns cuda tensor"""
    image = cv2.imread(image_name)
    image= transform(image)
    image = image.unsqueeze(0)  #this is for VGG, may not be needed for ResNet
    image = image.to(device)

    outputs = net(image)
    _, label= torch.max(outputs.data,1)
    classIndex=int(label[0].cpu())
    print("My class is ", classes[classIndex], " and value is ", chr(int(classes[classIndex])) )

image = image_loader("/content/Project/Test/100/10070.jpeg")





